package org.soa.femosaa;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

/**
 * 

 *         
 *         
 *         
 * @author tao
 *
 */
public class Workflow {

	public static AbstractService as0; 
	public static AbstractService as1; 
	public static AbstractService as2;
	public static AbstractService as3;
	public static AbstractService as4;
	
	
	public static final String[] qos = new String[]{"Throughput", "Cost"};
	public static int[] no_of_cs = {5,4,4,2,3};
	
	public static Map<AbstractService, Integer[]> map = new HashMap<AbstractService, Integer[]>();
	
	public static Map<AbstractService, ConcreteService[]> cs_map = new HashMap<AbstractService, ConcreteService[]>();
	
	
	
	public static List<AbstractService> all = new ArrayList<AbstractService> ();
	
	
	private static double[] means = {0.22384835029538044,0.8093885544977083,1.4956457672858117,0.5842670710967661,0.36007408139240094};
	
	private static double[] throughput_std = {1.2047579438162712,0.49472346993215566,0.981508833981758,0.5010549748277353,1.380823123759163};
	private static double[] cost_std = {2.743955645122113,0.7541088881238495,0.27762496657999464,0.16192976791265412,1.6962173969387382};
	
	
//	public static double[][] throughput_value = {
//		{1.2671030382981532,0.40913661700764703,1.555879387280249,0.4378912794131083,0.47201087418707743,1.0137433650473862,0.8231800199529441,1.3382862020845578,2.163099025011527,0.44440046972820313},
//		{1.6418333924690447,1.0092132965783054,0.8525101642468115,0.9051202464208915,1.1970602766750396,0.8407441361567279,1.239430086023923,1.7923435051774428,0.9749147668887681,1.0056410828664024},
//		{1.6945152811515694,1.7094589988238413,2.463579736561444,1.617351076020495,2.756230492745984,2.8658418272031354,2.3726140279114114,1.871242371667901,1.525387884496701,2.357273747589568},
//		{1.1678675832087153,0.845620689434949,0.6920386050162741,0.7467101170103725,0.6565447191220701,1.0000496264410241,0.8310530454615945,0.7852558638732243,1.6794622349267296,1.2093407826783757},
//		{1.686576581347576,0.8941645367176405,1.419553498284651,1.2162443160431322,2.2973971663767316,1.9431331292749312,2.0418954689848703,1.3860355185170823,0.36114095862463874,1.5464761150740878}
//		
//	};
//	
//	
//	
//	public static double[][] cost_value = {
//		{2.5999643204274503,0.6458607454239005,3.2576810817356594,0.7113523395121805,0.789063098897378,2.0229125489649187,1.588885639900611,2.7620910323631587,4.6406840005658365,0.7261776657131443},
//		{2.0782874229364547,1.1139821774578216,0.8751189901013925,0.9553127407189658,1.4003180517546232,0.8571839882267823,1.464902515116524,2.3077105666605444,1.061700796726063,1.1085370383565916},
//		{1.5518970614456224,1.556123971052248,1.7694310115628726,1.5300707577701076,1.8522088262828298,1.8832129721568962,1.743700879597132,1.6018852540116897,1.5040584824961212,1.7393618001469735},
//		{0.77287371154073,0.6687307185741401,0.6190964218704542,0.6367650324888438,0.607625591335057,0.7186386991045979,0.6640227816687128,0.6492221562718526,0.9382096674336631,0.786276922569672},
//		{1.9895634626110321,1.0161563168892134,1.6615495475177697,1.4118024467184926,2.7399017824923697,2.304720177765252,2.426040856638523,1.6203757147409754,0.36138464441135804,1.817462601810436}
//		
//	};
	
	public static double[][] throughput_value = {
		{1.2671030382981532,1.40913661700764703,1.555879387280249,0.4378912794131083,2.47201087418707743,3.0137433650473862,0.8231800199529441,5.3382862020845578,2.163099025011527,3.44440046972820313},
		{1.6418333924690447,3.0092132965783054,0.8525101642468115,0.9051202464208915,1.1970602766750396,0.8407441361567279,3.239430086023923,1.7923435051774428,3.9749147668887681,1.0056410828664024},
		{1.6945152811515694,2.7094589988238413,2.463579736561444,1.617351076020495,2.756230492745984,3.8658418272031354,5.3726140279114114,1.871242371667901,1.525387884496701,2.357273747589568},
		{1.1678675832087153,0.845620689434949,0.6920386050162741,3.7467101170103725,0.6565447191220701,3.0000496264410241,0.8310530454615945,3.7852558638732243,1.6794622349267296,1.2093407826783757},
		{1.686576581347576,2.8941645367176405,1.419553498284651,1.2162443160431322,2.2973971663767316,1.9431331292749312,2.0418954689848703,3.3860355185170823,3.36114095862463874,1.5464761150740878}
		
//		{0.7748695489240099,0.7456021700080577,0.7693854690886118,0.04546885471148232,0.5520840618069298,0.028562079709864352,0.24635990292103205,0.09934922722729622,0.6005815135022022,0.6308204166835185},
//		{0.12391638164606078,0.09876198238682232,0.26252842350146743,0.29293791207736986,0.5855292006126382,0.6373130725354796,0.2735506424115711,0.6398767851453013,0.1321805318006859,0.9085094589798491},
//		{0.7834112431315232,0.8776367274734913,0.8206496511977012,0.6284694889136854,0.552386761646461,0.3001696947149357,0.4283784422324869,0.12643766801543654,0.7514496663526878,0.8433058831258087},
//		{0.8934984099722005,0.48208766339185993,0.25308943573857656,0.3560199457229104,0.2595548077676946,0.8933591001673719,0.010059750540560852,0.42859395362961705,0.1715854439277219,0.7570504414193835},
//		{0.2583663846725395,0.8125162155763161,0.09937790373219935,0.35311483496048,0.7655884521853528,0.0360641735901317,0.01672423442058968,0.5583828525370019,0.46894334740578525,0.9210454570289487}
//	
	
	
	};
	
	
	
	public static double[][] cost_value = {
//		
//		{0.3429116482877511,0.9228431767768487,0.21805411581279166,0.5597892038683279,0.7922558893172594,0.9298778521162235,0.579422234621099,0.48431346384370166,0.5046804912889298,0.42759587496221907},
//		{0.25147239090582996,0.5655390815726151,0.7410696321428271,0.0815445800189123,0.5875497735774123,0.4692588547914319,0.13270117643292534,0.9439933142950411,0.731477042047057,0.3156715586118164},
//		{0.8063505668108242,0.04578645058978925,0.7647471584200944,0.33542632024068464,0.5602196446592507,0.47560518666814044,0.47765797113438646,0.4468845584950345,0.3527415980945924,0.6765332377542491},
//		{0.4548446171850352,0.5604813270624696,0.4284622378122326,0.026057437250835203,0.7473872441510083,0.42845386828835885,0.8165111054693582,0.6930594474037497,0.20184202888984348,0.9637572566032732},
//		{0.950461203032224,0.4714453689768472,0.5143136366383075,0.16713003211343347,0.9195874059080907,0.09430699577915636,0.5901598085983982,0.6785352219261644,0.7434519661083793,0.24396229608163245,}
		
		{2.5999643204274503,0.6458607454239005,3.2576810817356594,0.07113523395121805,0.789063098897378,2.0229125489649187,1.588885639900611,2.7620910323631587,4.6406840005658365,0.7261776657131443},
		{2.0782874229364547,1.1139821774578216,0.1751189901013925,0.9553127407189658,1.4003180517546232,0.2571839882267823,1.464902515116524,2.3077105666605444,1.061700796726063,1.1085370383565916},
		{1.5518970614456224,1.556123971052248,1.7694310115628726,3.5300707577701076,1.8522088262828298,0.8832129721568962,1.743700879597132,1.6018852540116897,1.5040584824961212,1.7393618001469735},
		{0.77287371154073,0.1687307185741401,0.6190964218704542,0.6367650324888438,0.607625591335057,0.7186386991045979,0.3640227816687128,0.2492221562718526,0.9382096674336631,0.186276922569672},
		{1.9895634626110321,1.0161563168892134,1.6615495475177697,1.4118024467184926,0.7399017824923697,2.304720177765252,2.426040856638523,0.6203757147409754,0.36138464441135804,1.817462601810436}
		
	};
	
	private AbstractService entryAbstractService;

	
	static {
		
		/**
		 * 
		 *         AS
         * AS -          - AS - AS  
         *         AS
		 * 
		 */
		 as0 = new AbstractService(generateOptionalCS(0)); 
		 as1 = new AbstractService(generateOptionalCS(1)); 
		 as2 = new AbstractService(generateOptionalCS(2)); 
		 as3 = new AbstractService(generateOptionalCS(3)); 
		 as4 = new AbstractService(generateOptionalCS(4)); 
		
		as0.addAbstractService(as1);
		as0.addAbstractService(as2);
		as0.addConnector(Connector.PARALLEL);
		
		as1.addAbstractService(as3);
		as1.addConnector(Connector.SEQUENTIAL);
		as2.addAbstractService(as3);
		as2.addConnector(Connector.SEQUENTIAL);
		// This needs to be checked, but it should not matter w.r.t to the comparative results
		//*******************
//		as1.addOtherAbstractService(as2);
//		as2.addOtherAbstractService(as1);
		//*******************
		as1.addOtherAbstractService(as1);
		as1.addOtherAbstractService(as2);
		as2.addOtherAbstractService(as1);
		as2.addOtherAbstractService(as2);
		
		as3.addAbstractService(as4);
		as3.addConnector(Connector.SEQUENTIAL);
		
		
		all.add(as0);
		all.add(as1);
		all.add(as2);
		all.add(as3);
		all.add(as4);
	}
	
	public Workflow(){
		entryAbstractService = all.get(0);
	}
	
	
	public double getObjectiveValues(int i, double[] xValue) {
		
		for (AbstractService as : map.keySet()) {
			as.resortSelected(xValue);
		}
		
		return entryAbstractService.getObjectiveValuesPort(i);
	}
	
	
	public static void main(String[] args) {
		String o = "";
		Random r  = new Random();
		for(int i = 0; i < 10;i++) {
			o += r.nextDouble() + ",";
		}
		System.out.print(o);
		
/*		int k = 4;
		String t = "";
		String c = "";
		for (int i = 0; i < 10;i++) {
			Random r = new Random();
			double mySample = r.nextGaussian();
			
			t += Math.abs(mySample)*throughput_std[k] + means[k] + ",";
		
			c += Math.abs(mySample)*cost_std[k] + means[k]+ ",";
		}
		
		
		System.out.print(t);
		System.out.print("\n");
		System.out.print(c);*/
	}
	
	
	private static List<ConcreteService> generateOptionalCS(int index){
		
		
		List<ConcreteService> options = new ArrayList<ConcreteService>();
		
		for (int i = 0; i < no_of_cs[index]; i++) {
			options.add(new ConcreteService(new double[]{throughput_value[index][i], cost_value[index][i]},index, i, i));
		}
		
		return options;
	}
	
	public List<Double> getObjectiveValueForEachOption(int i) {
		List<Double> list = new ArrayList<Double> ();
		list.addAll(as0.getObjectiveValueForEachOption(i));
		list.addAll(as1.getObjectiveValueForEachOption(i));
		list.addAll(as2.getObjectiveValueForEachOption(i));
		list.addAll(as3.getObjectiveValueForEachOption(i));
		list.addAll(as4.getObjectiveValueForEachOption(i));
		return list;
	}
}
